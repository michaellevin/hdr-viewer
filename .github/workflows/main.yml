name: HDR-VIEWER CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest] #, ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
    # [CHECKOUT LATEST]
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install pybind11
      run: |
            python -m pip install --upgrade pip
            pip install pybind11

    # [INSTALL OPENIMAGEIO]
    # Linux
    - name: Install OpenImageIO (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenimageio-dev
        sudo apt-get install -y openimageio-tools libopenexr-dev libopencolorio-dev libopencv-contrib-dev
        sudo apt-get install -y pybind11-dev
        sudo apt-get install -y opencl-headers ocl-icd-opencl-dev

    # MacOS
    - name: Install OpenImageIO (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        brew install openimageio
        brew install pybind11
        brew install opencl-headers
        brew install opencl-clhpp-headers
    
    # - name: Set CPPFLAGS for OpenCL headers
    #   if: matrix.os == 'macos-latest'
    #   run: echo "CPPFLAGS=-I/usr/local/opt/opencl-headers/include" >> $GITHUB_ENV

    # Windows: setup vcpkg and install OpenImageIO
    - name: Install vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg integrate install # it makes the installed libraries available to your build system.

    # Windows: install OpenImageIO
    - name: Install OpenImageIO via vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\vcpkg\vcpkg install openimageio:x64-windows pybind11:x64-windows opencl:x64-windows
       
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    # [CONFIGURE CMAKE]
    - name: Configure CMake on Ubuntu and macOS
      if: runner.os == 'Linux' 
      shell: bash
    #   working-directory: ${{github.workspace}}/build
      run: cmake ${{github.workspace}}/cpp -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake on Ubuntu and macOS
      if: runner.os == 'macOS'
      shell: bash
    #   working-directory: ${{github.workspace}}/build
      run: cmake ${{github.workspace}}/cpp -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_DEPLOYMENT_TARGET=11.6 -Wno-dev

    - name: Configure CMake on Windows
      if: runner.os == 'Windows'
      shell: bash
    #   working-directory: ${{github.workspace}}/build
    #   run: cmake $GITHUB_WORKSPACE/cpp -B $GITHUB_WORKSPACE/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake
      run: |
        cmake $GITHUB_WORKSPACE/cpp -B $GITHUB_WORKSPACE/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake

    # [BUILD]
    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config Release

    # List the contents of the build output directory
    - name: List build outputs
      shell: bash
      run: |
        echo "Listing build outputs..."
        if [ -d "${{github.workspace}}/build/Release" ]; then
          # For systems that use a 'Release' directory
          ls -R "${{github.workspace}}/build/Release"
        else
          # For systems that don't use a 'Release' directory
          ls -R "${{github.workspace}}/build"
        fi
    
    # [PUBLISH ARTIFACTS]
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        # Artifact name
        name: hdr-viewer-py39-${{ runner.os }}
        # Directory containing the build artifacts
        path: |
            ${{github.workspace}}/build/Release/*
            ${{github.workspace}}/build/*.*
        # Retention period in days (optional)
        retention-days: 5