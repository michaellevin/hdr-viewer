name: HDR-VIEWER CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest , windows-latest]
      fail-fast: false

    steps:
    # [CHECKOUT LATEST]
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install pybind11
      run: |
            python -m pip install --upgrade pip
            pip install pybind11

    # [INSTALL OPENIMAGEIO]
    # Linux
    - name: Install OpenImageIO (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenimageio-dev
        sudo apt-get install -y openimageio-tools libopenexr-dev libopencolorio-dev libopencv-contrib-dev
        sudo apt-get install -y pybind11-dev
        sudo apt-get install -y opencl-headers ocl-icd-opencl-dev

    # MacOS
    - name: Install OpenImageIO (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        brew install openimageio
        brew install pybind11
        brew install opencl-clhpp-headers

    # Windows: setup vcpkg and install OpenImageIO
    - name: Install vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg integrate install # it makes the installed libraries available to your build system.

    # Windows: install OpenImageIO
    - name: Install OpenImageIO via vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\vcpkg\vcpkg install openimageio:x64-windows pybind11:x64-windows opencl:x64-windows

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    # [CONFIGURE CMAKE]
    - name: Configure CMake on Linux
      if: runner.os == 'Linux' 
      shell: bash
    #   working-directory: ${{github.workspace}}/build
      run: cmake ${{github.workspace}}/cpp -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake on MacOS
      if: runner.os == 'macOS'
      shell: bash
      # working-directory: ${{github.workspace}}/build
      # run: cmake ${{github.workspace}}/cpp -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_DEPLOYMENT_TARGET=11.6 -Wno-dev
      run: cmake ${{github.workspace}}/cpp -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -Wno-dev

    - name: Configure CMake on Windows
      if: runner.os == 'Windows'
      shell: bash
    #   working-directory: ${{github.workspace}}/build
      run: |
        cmake $GITHUB_WORKSPACE/cpp -B $GITHUB_WORKSPACE/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake

    # [BUILD]
    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config Release

    # List the contents of the build output directory
    # - name: List build outputs
    #   shell: bash
    #   run: |
    #     echo "Listing build outputs..."
    #     if [ -d "${{github.workspace}}/build/Release" ]; then
    #       # For systems that use a 'Release' directory
    #       ls -R "${{github.workspace}}/build/Release"
    #     else
    #       # For systems that don't use a 'Release' directory
    #       ls -R "${{github.workspace}}/build"
    #     fi
    
    # [PUBLISH ARTIFACTS]
    - name: Prepare Artifacts for macOS/Linux
      if: runner.os != 'Windows'
      run: |
        cd ${{github.workspace}}/build
        # Find the .so file and rename it
        find . -type f -name "libhdr_viewer_cpp.so" -exec bash -c 'mv $0 ${0/lib/}' {} \;
      shell: bash

    - name: Upload Artifacts for macOS/Linux
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: hdr-viewer-py39-${{ runner.os }}
        path: ${{github.workspace}}/build/hdr_viewer_cpp.so
        retention-days: 5

    - name: Upload Artifacts for Windows
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: hdr-viewer-py39-${{ runner.os }}
        path: ${{github.workspace}}/build/Release
        retention-days: 5
  
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Download Artifacts
    - name: Download Artifacts
      uses: actions/download-artifact@master
      with:
        path: artifacts
    
    - name: Flatten directories structure after download
      run: |
        temp_dir=$(pwd)/artifacts_temp
        mkdir -p "$temp_dir"
        for dir in $(pwd)/artifacts/*; do
            if [[ -d "$dir" ]]; then
                mv "$dir"/* "$temp_dir/"
                rmdir "$dir"
            fi
        done
        mv "$temp_dir"/* $(pwd)/artifacts/
        rmdir "$temp_dir"

    # Setup Node.js environment
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    # Install semantic-release and plugins
    - name: Install dependencies
      run: |
        npm install semantic-release @semantic-release/github @semantic-release/changelog @semantic-release/git

    # Run semantic-release
    - name: Semantic Release
      id: semantic
      run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Get latest release
      id: latest_release
      run: |
        LATEST_RELEASE_URL=$(curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --url 'https://api.github.com/repos/${{ github.repository }}/releases/latest' \
            --silent \
            --location \
            | jq -r '.upload_url')
        echo "Latest release URL is $LATEST_RELEASE_URL"
        echo "upload_url=$LATEST_RELEASE_URL" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: List Artifacts
      run: |
        ls -lR artifacts/

    - name: Upload Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ls -lRh artifacts/
        BASE_UPLOAD_URL="${{ env.upload_url }}"
        BASE_UPLOAD_URL="${BASE_UPLOAD_URL/\{\?name,label\}/}" # Remove {?name,label} from the URL
        for asset in $(pwd)/artifacts/*; do
          echo "asset > $asset"
          asset_name=$(basename $asset)
          content_type=$(file --mime-type -b $asset)        
          curl \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: $content_type" \
            --data-binary "@$asset" \
            "${BASE_UPLOAD_URL}?name=$asset_name&label=$asset_name"
        done